<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MMDET的安装和使用</title>
    <link href="/2021/03/17/MMDET%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/03/17/MMDET%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="一、链接"><a href="#一、链接" class="headerlink" title="一、链接"></a>一、链接</h3><h4 id="GIthub地址"><a href="#GIthub地址" class="headerlink" title="GIthub地址"></a><a href="https://github.com/open-mmlab/mmdetection">GIthub地址</a></h4><h4 id="文档地址"><a href="#文档地址" class="headerlink" title="文档地址"></a><a href="https://mmdetection.readthedocs.io/">文档地址</a></h4><hr><h3 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h3><h4 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h4><ul><li><p>Linux 或者macOS系统</p></li><li><p>Python 3.6+</p></li><li><p>PyTorch 1.3+</p></li><li><p>GCC 5+</p></li><li><p>mmcv（商汤的一个cv库）</p></li></ul><h4 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h4><ul><li><ol><li><p>创建conda环境并激活</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda create -n open-mmlab python=3.7 -y<br>conda activate open-mmlab<br></code></pre></td></tr></table></figure></li></ol></li><li><ol start="2"><li>安装PyTorch和Torchvision，参考<a href="https://pytorch.org/get-started/locally/">pytorch官网</a>和cuda版本安装，示例:</li></ol><ul><li><p>方法一<br>conda 或者 pip 在线安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda install pytorch torchvision cudatoolkit=10.1 -c pytorch<br></code></pre></td></tr></table></figure></li><li><p>方法二<br>通过<a href="https://download.pytorch.org/whl/torch_stable.html">torch 离线镜像网址</a>下载whl后 pip离线安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install torchvision-0.8.1+cu110-cp37-cp37m-linux_x86_64.whl<br>pip install torch-1.7.0+cu110-cp37-cp37m-linux_x86_64.whl<br></code></pre></td></tr></table></figure></li></ul></li><li><ol start="3"><li>安装mmcv(1.2)</li></ol><ul><li><p>方法一</p><p>直接安装</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">eg</span>:<br><span class="hljs-attribute">pip</span> install mmcv-full === <span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure></li><li><p>方法二</p><p>根据pytorch、cuda，见下表：</p><table class="docutils">  <tbody>    <tr><th width="80"> CUDA </th><th valign="bottom" align="left" width="100">torch 1.6</th><th valign="bottom" align="left" width="100">torch 1.5</th><th valign="bottom" align="left" width="100">torch 1.4</th><th valign="bottom" align="left" width="100">torch 1.3</th></tr>    <tr>      <td align="left">10.2</td>      <td align="left"><details><summary> install </summary><pre><code>pip install mmcv-full==latest+torch1.6.0+cu102 -f https://openmmlab.oss-accelerate.aliyuncs.com/mmcv/dist/index.html</code></pre> </details> </td>      <td align="left"><details><summary> install </summary><pre><code>pip install mmcv-full==latest+torch1.5.0+cu102 -f https://openmmlab.oss-accelerate.aliyuncs.com/mmcv/dist/index.html</code></pre> </details> </td>      <td align="left"> </td>      <td align="left"> </td>    </tr>    <tr>      <td align="left">10.1</td>      <td align="left"><details><summary> install </summary><pre><code> pip install mmcv-full==latest+torch1.6.0+cu101 -f https://openmmlab.oss-accelerate.aliyuncs.com/mmcv/dist/index.html</code></pre> </details> </td>      <td align="left"><details><summary> install </summary><pre><code> pip install mmcv-full==latest+torch1.5.0+cu101 -f https://openmmlab.oss-accelerate.aliyuncs.com/mmcv/dist/index.html</code></pre> </details> </td>      <td align="left"><details><summary> install </summary><pre><code>pip install mmcv-full==latest+torch1.4.0+cu101 -f https://openmmlab.oss-accelerate.aliyuncs.com/mmcv/dist/index.html</code></pre> </details> </td>      <td align="left"><details><summary> install </summary><pre><code>pip install mmcv-full==latest+torch1.3.0+cu101 -f https://openmmlab.oss-accelerate.aliyuncs.com/mmcv/dist/index.html</code></pre> </details> </td>    </tr>    <tr>      <td align="left">9.2</td>      <td align="left"><details><summary> install </summary><pre><code> pip install mmcv-full==latest+torch1.6.0+cu92 -f https://openmmlab.oss-accelerate.aliyuncs.com/mmcv/dist/index.html</code></pre> </details> </td>      <td align="left"><details><summary> install </summary><pre><code> pip install mmcv-full==latest+torch1.5.0+cu92 -f https://openmmlab.oss-accelerate.aliyuncs.com/mmcv/dist/index.html</code></pre> </details> </td>      <td align="left"><details><summary> install </summary><pre><code>pip install mmcv-full==latest+torch1.4.0+cu92 -f https://openmmlab.oss-accelerate.aliyuncs.com/mmcv/dist/index.html</code></pre> </details> </td>      <td align="left"><details><summary> install </summary><pre><code>pip install mmcv-full==latest+torch1.3.0+cu92 -f https://openmmlab.oss-accelerate.aliyuncs.com/mmcv/dist/index.html</code></pre> </details> </td>    </tr>    <tr>      <td align="left">cpu</td>      <td align="left"><details><summary> install </summary><pre><code> pip install mmcv-full==latest+torch1.6.0+cpu -f https://openmmlab.oss-accelerate.aliyuncs.com/mmcv/dist/index.html</code></pre> </details> </td>      <td align="left"><details><summary> install </summary><pre><code> pip install mmcv-full==latest+torch1.5.0+cpu -f https://openmmlab.oss-accelerate.aliyuncs.com/mmcv/dist/index.html</code></pre> </details> </td>      <td align="left"><details><summary> install </summary><pre><code>pip install mmcv-full==latest+torch1.4.0+cpu -f https://openmmlab.oss-accelerate.aliyuncs.com/mmcv/dist/index.html</code></pre> </details> </td>      <td align="left"><details><summary> install </summary><pre><code>pip install mmcv-full==latest+torch1.3.0+cpu -f https://openmmlab.oss-accelerate.aliyuncs.com/mmcv/dist/index.html</code></pre> </details> </td>    </tr>  </tbody></table></li></ul></li></ul><pre><code>运行如下指令下载<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pip</span> install mmcv-full==latest+torch<span class="hljs-number">1</span>.<span class="hljs-number">6</span>.<span class="hljs-number">0</span>+cu<span class="hljs-number">101</span> -f https://openmmlab.oss-accelerate.aliyuncs.com/mmcv/dist/index.html<br></code></pre></td></tr></table></figure>Tips：若不在表中，可尝试魔改命令下载<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">pip install mmcv-full==latest+torch1.<span class="hljs-number">4.0</span>+cu100 -f https:<span class="hljs-regexp">//</span>openmmlab.oss-accelerate.aliyuncs.com<span class="hljs-regexp">/mmcv/</span>dist/index.html<br>pip install mmcv-full -f https:<span class="hljs-regexp">//</span>download.openmmlab.com<span class="hljs-regexp">/mmcv/</span>dist<span class="hljs-regexp">/cu110/</span>torch1.<span class="hljs-number">7.0</span>/index.html<br>pip install mmcv-full==<span class="hljs-number">1.2</span> -f https:<span class="hljs-regexp">//</span>download.openmmlab.com<span class="hljs-regexp">/mmcv/</span>dist<span class="hljs-regexp">/cu100/</span>torch1.<span class="hljs-number">4.0</span>/index.html<br></code></pre></td></tr></table></figure></code></pre><ul><li><p>方法三</p><p>git 下载mmcv(2.6)源码后，通过git checkout命令修改版本，然后编译mmcv</p></li><li><ol start="4"><li><p>在home的用户目录创建MMD父目录并克隆mmdetection存储库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/USER<br>mkdir MMDET<br>git <span class="hljs-built_in">clone</span> https://github.com/open-mmlab/mmdetection.git<br><span class="hljs-comment"># 换一个镜像比较快</span><br>git <span class="hljs-built_in">clone</span> https://github.com.cnpmjs.org/open-mmlab/mmdetection.git<br><span class="hljs-built_in">cd</span> mmdetection<br><span class="hljs-comment"># 用git checkout 更换版本（github的tags）,考虑2.6</span><br>git checkout bd3306f<br><span class="hljs-comment"># 查看是否更换成功</span><br>cat mmdet/version.py<br><span class="hljs-comment"># 安装</span><br>pip install -r requirements/build.txt<br>pip install -v -e .  <span class="hljs-comment"># 或  python setup.py develop</span><br></code></pre></td></tr></table></figure></li></ol></li></ul><ul><li><ol start="5"><li><p>测试是否安装成功</p><p>可以直接运行demo文件，查看输出是不是报缺少参数的错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python ./demo/image_demo.py<br></code></pre></td></tr></table></figure><p>报错：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">usage</span>: image_demo.py [-h] [<span class="hljs-comment">--device DEVICE] [--score-thr SCORE_THR]</span><br>                     img config <span class="hljs-keyword">checkpoint</span><br>image_demo.py: error: the <span class="hljs-keyword">following</span> arguments are required: img, config, <span class="hljs-keyword">checkpoint</span><br></code></pre></td></tr></table></figure><p>也可以通过下载checkpoint并且指定配置文件，其中checkpoin可以在github的<a href="https://github.com/open-mmlab/mmdetection/blob/master/docs/model_zoo.md">model zoo</a>里面下载，然后选择对应的模型，例如<a href="http://download.openmmlab.com/mmdetection/v2.0/faster_rcnn/faster_rcnn_r50_fpn_1x_coco/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth">faster RCNN</a>，下载后保存到本地</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> mmdet.apis <span class="hljs-keyword">import</span> init_detector, inference_detector, show_result_pyplot<br><span class="hljs-keyword">import</span> mmcv<br>config_file = <span class="hljs-string">&#x27;../configs/faster_rcnn/faster_rcnn_r50_fpn_1x_coco.py&#x27;</span><br><span class="hljs-comment"># download the checkpoint from model zoo and put it in `checkpoints/`</span><br>checkpoint_file = <span class="hljs-string">&#x27;../checkpoints/faster_rcnn_r50_fpn_1x_20181010-3d1b3351.pth&#x27;</span><br><span class="hljs-comment"># build the model from a config file and a checkpoint file</span><br>model = init_detector(config_file, checkpoint_file, device=<span class="hljs-string">&#x27;cuda:0&#x27;</span>)<br><span class="hljs-comment"># test a single image</span><br>img = <span class="hljs-string">&#x27;demo.jpg&#x27;</span><br>result = inference_detector(model, img)<br><span class="hljs-comment"># show the results</span><br>show_result_pyplot(model, img, result)<br></code></pre></td></tr></table></figure></li></ol></li></ul><h3 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h3><h4 id="使用labelme标注数据（待补充）"><a href="#使用labelme标注数据（待补充）" class="headerlink" title="使用labelme标注数据（待补充）"></a>使用labelme标注数据（待补充）</h4><ul><li>下载后，在终端输入labelme即可使用</li></ul><h4 id="转换成COCO数据集"><a href="#转换成COCO数据集" class="headerlink" title="转换成COCO数据集"></a>转换成COCO数据集</h4><ul><li><p>使用脚本convert2coco.py将labelme的标准文件转换成coco格式，该脚本接受参数如下所示：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> convert2coco.<span class="hljs-keyword">py</span> --<span class="hljs-keyword">lp</span> path/<span class="hljs-keyword">to</span>/labemefile --<span class="hljs-keyword">sp</span> path/<span class="hljs-keyword">to</span>/savepath<br># --<span class="hljs-keyword">lp</span> 后面是labelme标注好的<br># --<span class="hljs-keyword">sp</span> 后面是保存coco格式的数据的地址<br></code></pre></td></tr></table></figure></li></ul><h4 id="配置文件设置"><a href="#配置文件设置" class="headerlink" title="配置文件设置"></a>配置文件设置</h4><ol><li><p>新建一个task_config文件夹，里面放置配置文件</p></li><li><p>在task_config文件夹里新建_base_文件夹，workdir文件夹</p></li><li><p>在mmdet/configs里面选择相应的模型，例如faster_rcnn，将faster_rcnn_r50_fpn_1x_coco.py复制到task_config文件夹下</p></li><li><p>在mmdet/configs/_base_文件夹下，找到datasets/coco_detection.py，default_runtime.py，models/fast_rcnn_r50_fpn.py，schedules/schedule_1x.py。最终目录如下所示</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">├── _base_<br>│   ├── datasets<br>│   │   └── coco_detection.py<br>│   ├── default_runtime.py<br>│   ├── models<br>│   │   └── faster_rcnn_r50_fpn.py<br>│   └── schedules<br>│       └── schedule_1x.py<br>├── faster_rcnn_r50_fpn_1x_coco.py<br>└── workdir<br></code></pre></td></tr></table></figure></li><li><p>修改faster_rcnn_r50_fpn_1x_coco.py，将所有../改成./</p></li><li><p>修改coco_detection.py</p><ul><li><p>Line2: data_root 修改成训练数据的coco地址</p></li><li><p>加入一行class种类</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">e</span><span class="hljs-variable">g:</span><br>classes = (<span class="hljs-string">&#x27;normal&#x27;</span>,<span class="hljs-string">&#x27;unmormal&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li><p>修改data字典，加入classes属性，如下所示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">data = <span class="hljs-built_in">dict</span>(<br>    samples_per_gpu=<span class="hljs-number">1</span>,<br>    workers_per_gpu=<span class="hljs-number">1</span>,<br>    train=<span class="hljs-built_in">dict</span>(<br>        <span class="hljs-built_in">type</span>=dataset_type,<br>        classes=classes,<br>        ann_file=data_root + <span class="hljs-string">&#x27;annotations/instances_train2017.json&#x27;</span>,<br>        img_prefix=data_root + <span class="hljs-string">&#x27;train2017/&#x27;</span>,<br>        pipeline=train_pipeline),<br>    val=<span class="hljs-built_in">dict</span>(<br>        <span class="hljs-built_in">type</span>=dataset_type,<br>        classes=classes,<br>        ann_file=data_root + <span class="hljs-string">&#x27;annotations/instances_val2017.json&#x27;</span>,<br>        img_prefix=data_root + <span class="hljs-string">&#x27;val2017/&#x27;</span>,<br>        pipeline=test_pipeline),<br>    test=<span class="hljs-built_in">dict</span>(<br>        <span class="hljs-built_in">type</span>=dataset_type,<br>        classes=classes,<br>        ann_file=data_root + <span class="hljs-string">&#x27;annotations/instances_val2017.json&#x27;</span>,<br>        img_prefix=data_root + <span class="hljs-string">&#x27;val2017/&#x27;</span>,<br>        pipeline=test_pipeline))<br></code></pre></td></tr></table></figure></li><li><p>data字典的各个路径查看是否匹配</p></li></ul></li><li><p>修改faster_rcnn_r50_fpn.py</p><ul><li><p>如果已经有faster RCNN的预训练模型，可以把pretrained=’torchvision://resnet50’注释掉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># pretrained=&#x27;torchvision://resnet50&#x27;,</span><br></code></pre></td></tr></table></figure></li><li><p>修改46行的num_classes为需要识别的种类数目，不包括背景，一类就是1</p></li></ul></li><li><p>修改schedule_1x.py</p><ul><li>考虑修改lr和totla_epochs，lr可以考虑修改成0.002</li></ul></li><li><p>修改default_runtime.py</p><ul><li>如果有fater RCNN预训练模型，可以把load_from修改成checkpoint的路径</li></ul></li><li><p>训练</p><ul><li><p>进入mmdet目录 设置config文件路径 和 workdir路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> mmdet<br>python tools/train.py ~/PPAI_test_M/ppai_config/faster_rcnn_r50_fpn_1x_coco.py --work-dir ~/PPAI_test_M/ppai_config/workdir/<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">    <br></code></pre></td></tr></table></figure></li><li></li></ol><h4 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h4><h4 id="推理"><a href="#推理" class="headerlink" title="推理"></a>推理</h4>]]></content>
    
    
    
    <tags>
      
      <tag>MMDET安装</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cuda cudnn torch的配置</title>
    <link href="/2021/03/17/cuda-cudnn-torch%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/03/17/cuda-cudnn-torch%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<ol><li>安装cuda</li></ol><ul><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"> sudo sh cuda_10.0.130_410.48_linux.run<br><span class="hljs-comment"># 按z快进</span><br><span class="hljs-comment"># 选项</span><br>Do you accept the previously <span class="hljs-built_in">read</span> EULA?<br>accept/decline/quit: accept<br>Install NVIDIA Accelerated Graphics Driver <span class="hljs-keyword">for</span> Linux-x86_64 410.48?<br>(y)es/(n)o/(q)uit: n<br><br>Install the CUDA 10.0 Toolkit?<br>(y)es/(n)o/(q)uit: y<br><br>Enter Toolkit Location<br> [ default is /usr/<span class="hljs-built_in">local</span>/cuda-10.0 ]:<br><br>Do you want to install a symbolic link at /usr/<span class="hljs-built_in">local</span>/cuda?<br>(y)es/(n)o/(q)uit: y<br><br>Install the CUDA 10.0 Samples?<br>(y)es/(n)o/(q)uit: y<br><br>Enter CUDA Samples Location<br> [ default is /home/hycx ]:<br></code></pre></td></tr></table></figure></li><li><p>添加环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim ~/.bashrc<br><span class="hljs-comment"># 在最下面插入</span><br><span class="hljs-comment"># cuda env</span><br><span class="hljs-built_in">export</span> CUDA_HOME=/usr/<span class="hljs-built_in">local</span>/cuda<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$CUDA_HOME</span>/bin<br><span class="hljs-built_in">export</span> LD_LIBRARY_PATH=/usr/<span class="hljs-built_in">local</span>/cuda/lib64<span class="hljs-variable">$&#123;LD_LIBRARY_PATH:+:<span class="hljs-variable">$&#123;LD_LIBRARY_PATH&#125;</span>&#125;</span><br><br><span class="hljs-comment"># 保存并激活环境</span><br><span class="hljs-built_in">source</span> ~/.bashrc<br><br><span class="hljs-comment"># 检查是否安装成功</span><br>nvcc -V<br><span class="hljs-comment"># 输出</span><br>nvcc: NVIDIA (R) Cuda compiler driver<br>Copyright (c) 2005-2018 NVIDIA Corporation<br>Built on Sat_Aug_25_21:08:01_CDT_2018<br>Cuda compilation tools, release 10.0, V10.0.130<br></code></pre></td></tr></table></figure></li></ul><ol start="2"><li><p>安装cudnn</p><ul><li><p>解压cudnn</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar zxvf cudnn-10.0-linux-x64-v7.6.5.32.tgz<br></code></pre></td></tr></table></figure></li><li><p>将文件放入cuda文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo cp cuda/include/cudnn.h /usr/<span class="hljs-built_in">local</span>/cuda/include/ <br>sudo cp cuda/lib64/libcudnn* /usr/<span class="hljs-built_in">local</span>/cuda/lib64/ <br>sudo chmod a+r /usr/<span class="hljs-built_in">local</span>/cuda/include/cudnn.h <br>sudo chmod a+r /usr/<span class="hljs-built_in">local</span>/cuda/lib64/libcudnn*<br></code></pre></td></tr></table></figure></li><li><p>查看cudnn版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat /usr/<span class="hljs-built_in">local</span>/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2<br><span class="hljs-comment"># 出现以下信息</span><br><br><br><span class="hljs-comment">#define CUDNN_MAJOR 7</span><br><span class="hljs-comment">#define CUDNN_MINOR 6</span><br><span class="hljs-comment">#define CUDNN_PATCHLEVEL 5</span><br>--<br><span class="hljs-comment">#define CUDNN_VERSION (CUDNN_MAJOR * 1000 + CUDNN_MINOR * 100 + CUDNN_PATCHLEVEL)</span><br><br><span class="hljs-comment">#include &quot;driver_types.h&quot;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>安装conda</p><ul><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">sh ./Miniconda3-latest-Linux-x86_64.sh<br><span class="hljs-comment"># init选择yes</span><br>by running conda init? [yes|no]<br>[no] &gt;&gt;&gt; yes<br><span class="hljs-comment"># 重启终端查看是否安装成功</span><br>conda env list<br></code></pre></td></tr></table></figure></li><li><p>换源（参考<a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">清华源</a>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 生成config文件</span><br>conda config --<span class="hljs-built_in">set</span> show_channel_urls yes<br><span class="hljs-comment"># 修改 .condarc文件</span><br>vim ~/.condarc<br><span class="hljs-comment"># 内容修改为以下内容</span><br>channels:<br>  - defaults<br>show_channel_urls: <span class="hljs-literal">true</span><br>default_channels:<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2<br>custom_channels:<br>  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  <span class="hljs-comment"># 清除索引缓存，保证用的是镜像站提供的索引</span><br>  conda clean -i <br></code></pre></td></tr></table></figure></li><li><p>创建新环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建torch的python 3.7环境</span><br>conda create -n torch_1.4 python==3.7<br><span class="hljs-comment"># 激活环境</span><br></code></pre></td></tr></table></figure></li><li><p>更改pip源为豆瓣源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 升级 pip 到最新的版本 (&gt;=10.0.0) 后进行配置：</span><br>pip install pip -U<br>pip config <span class="hljs-built_in">set</span> global.index-url https://pypi.doubanio.com/simple<br></code></pre></td></tr></table></figure></li></ul></li><li><p>安装torch和torchvision</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 离线下载后本地安装</span><br>pip install torch-1.4.0+cu100-cp37-cp37m-linux_x86_64.whl<br>pip install torchvision-0.5.0+cu100-cp37-cp37m-linux_x86_64.whl<br><span class="hljs-comment"># 检查是否成功</span><br>(torch_1.4) hycx@hycx:~/下载$ python<br>Python 3.7.0 (default, Oct  9 2018, 10:31:47)<br>[GCC 7.3.0] :: Anaconda, Inc. on linux<br>Type <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;copyright&quot;</span>, <span class="hljs-string">&quot;credits&quot;</span> or <span class="hljs-string">&quot;license&quot;</span> <span class="hljs-keyword">for</span> more information.<br>&gt;&gt;&gt; import torch<br>&gt;&gt;&gt; torch.cuda.is_available()<br>True<br>&gt;&gt;&gt; <span class="hljs-built_in">exit</span>()<br></code></pre></td></tr></table></figure></li><li><p>克隆一个环境到mmdet</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda create -n mmdet_2.6 --<span class="hljs-built_in">clone</span> torch_1.4<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>MMDET安装</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
